import java.sql.Array;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
 
public class test {
    //task 1
//    public static void main(String[] args) {
//        ArrayList<String> result = new ArrayList<String>();
//        Scanner in = new Scanner(System.in);
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            int indexOfBegin = 0, indexOfEnd = 0;
//            while (indexOfBegin != -1 && indexOfEnd != -1) {
//                indexOfBegin = str.indexOf('"',indexOfBegin);
//                indexOfEnd = str.indexOf('"',indexOfBegin + 1);
//                if (indexOfEnd != -1 && indexOfBegin != -1) {
//                    result.add(str.substring(indexOfBegin + 1, indexOfEnd));
//                    indexOfBegin = indexOfEnd + 1;
//                }
//            }
//        }
//        for (String str: result)
//            System.out.println(str);
//    }
 
    //task‚ 2
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        ArrayList<String> result = new ArrayList<>();
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[A-Z][a-zA-Z]+"))
//                    result.add(word);
//            }
//        }
//        for (String word: result)
//            System.out.println(word);
//    }
 
//    task 3
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        String str = "";
//        while (in.hasNextLine())
//            str += in.nextLine();
//        String result = "";
//        int index = 0;
//        while (index < str.length()) {
//            if (str.charAt(index) == '.' || str.charAt(index) == '?') {
//                result += str.substring(0, index + 1) + " ";
//                str = str.substring(index + 1, str.length());
//                index = 0;
//            } else if (str.charAt(index) == '!') {
//                result += str.substring(0, index + 1).toUpperCase();
//                str = str.substring(index + 1, str.length());
//                index = 0;
//            }
//            index ++;
//        }
//        System.out.println(result);
//    }
 
//    task 4
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        ArrayList<String> result = new ArrayList<>();
//        String str = "";
//        while (in.hasNextLine())
//            str += in.nextLine();
//        int index = 0;
//        while (index < str.length()) {
//            if (str.charAt(index) == '.' || str.charAt(index) == '!') {
//                str = str.substring(index + 1);
//                index = 0;
//            } else if (str.charAt(index) == '?') {
//                result.add(str.substring(0, index + 1));
//                str = str.substring(index + 1);
//                index = 0;
//            }
//            index ++;
//        }
//        for (String buf: result)
//            System.out.println(buf);
//    }
 
//   task 5
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        int line = 0;
//        HashMap<Long, Integer> result = new HashMap<Long, Integer>();
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[0-9]+[lL]"))
//                    result.put(Long.parseLong(word.substring(0,word.length() - 1)), line);
//            }
//        }
//        ArrayList<Long> sorted = new ArrayList<>(result.keySet());
//        Collections.sort(sorted);
//        for (Long value: sorted)
//            System.out.println(value + " (" + result.get(value) + ")");
//    }
 
//    task 6
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        ArrayList<String> result = new ArrayList<>();
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[0-9]+"))
//                    result.add(word);
//            }
//        }
//        for (String word: result)
//            System.out.println(word);
//    }
 
//    task 7
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        String result = "";
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[0-9]+"))
//                    result += Integer.toHexString(Integer.parseInt(word)) + " ";
//            }
//        }
//        System.out.println(result);
//    }
 
//    task 8
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        while (in.hasNextLine()) {
//            ArrayList<String> sortedResult = new ArrayList<>();
//            String str = in.nextLine(), result = "";
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[a-zA-Z]+"))
//                    sortedResult.add(word);
//            }
//            Collections.sort(sortedResult);
//            for (int i = 0; i < sortedResult.size(); ++i) {
//                str = str.replaceFirst("[a-zA-Z]+", sortedResult.get(i));
//                result += str.substring(0, str.indexOf(sortedResult.get(i)) + sortedResult.get(i).length() );
//                str = str.substring(str.indexOf(sortedResult.get(i)) + sortedResult.get(i).length());
//            }
//            System.out.println(result);
//        }
//    }
 
   // task 9
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        while (in.hasNextLine()) {
//            ArrayList<String> reversedResult = new ArrayList<>();
//            String str = in.nextLine(), result = "";
//            StringTokenizer words = new StringTokenizer(str);
//            while (words.hasMoreTokens()) {
//                String word = words.nextToken();
//                if (word.matches("[0-9a-zA-Z]+"))
//                    reversedResult.add(word);
//            }
//            Collections.reverse(reversedResult);
//            for (int i = 0; i < reversedResult.size(); ++i) {
//                str = str.replaceFirst("[0-9a-zA-Z]+", reversedResult.get(i));
//                result += str.substring(0, str.indexOf(reversedResult.get(i)) + reversedResult.get(i).length() );
//                str = str.substring(str.indexOf(reversedResult.get(i)) + reversedResult.get(i).length() );
//            }
//            System.out.println(result);
//        }
//    }
 
//   task 10
//    public static void main(String[] args) {
//        String phrase = args[0];
//        Scanner in = new Scanner(System.in);
//        String str = "";
//        while (in.hasNextLine())
//            str += in.nextLine();
//        StringTokenizer sentences = new StringTokenizer(str, ".!?");
//        while (sentences.hasMoreTokens()) {
//            String sentence = sentences.nextToken();
//            if (sentence.indexOf(phrase) != -1)
//                System.out.println(sentence);
//        }
//    }
 
//    task 11
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        String str = "";
//        ArrayList<String> polindroms = new ArrayList<>();
//        while (in.hasNextLine())
//            str += in.nextLine();
//        StringBuffer result = new StringBuffer(str);
//        Pattern pattern = Pattern.compile("[a-zа-яA-ZА-Я]+");
//        Matcher matcher = pattern.matcher(str);
//        int begin, end;
//        while (matcher.find()) {
//            begin = matcher.start();
//            end = matcher.end();
//            StringBuffer word = new StringBuffer(str.substring(begin, end));
//            if (word.reverse().toString().equals((str.substring(begin, end))))
//                polindroms.add((str.substring(begin, end)));
//        }
//        Collections.sort(polindroms);
//        int i = 0;
//        matcher = pattern.matcher(str);
//        while (matcher.find()) {
//            begin = matcher.start();
//            end = matcher.end();
//            StringBuffer word = new StringBuffer(str.substring(begin, end));
//            if (word.reverse().toString().equals((str.substring(begin, end)))) {
//                result.replace(begin, end, polindroms.get(i));
//                ++i;
//            }
//        }
//        System.out.println(result);
//    }
 
  //  task 12
//    public static class my_Comparator implements Comparator<String>{
//        @Override
//        public int compare(String s, String t1) {
//            int num1 = Integer.parseInt(s);
//            int num2 = Integer.parseInt(t1);
//            int res1=0,res2=0;
//            while (num1!=0){
//                res1 +=num1%10;
//                num1=num1/10;
//            }
//            while (num2!=0){
//                res2 +=num2%10;
//                num2=num2/10;
//            }
//            if (res1>res2){
//                return 1;
//            }
//            if (res2>res1){
//                return -1;
//            }
//            return 0;
//        }
//    }
//    public static void main(String[] args) {
//        ArrayList<String> numbers= new ArrayList<>();
//        String result = "";
//        String answer = "";
//        Scanner sc = new Scanner(System.in);
//        while (sc.hasNext()){
//            result+=sc.nextLine();
//        }
//        StringTokenizer tokenizer = new StringTokenizer(result);
//        while (tokenizer.hasMoreElements()){
//            String word = tokenizer.nextToken();
//            if (word.matches("\\b[0-9]+\\b")){
//                numbers.add(word);
//            }
//        }
//        Collections.sort(numbers);
//        numbers.sort(new my_Comparator());
//        for (int i = 0;i<numbers.size();++i){
//            result = result.replaceFirst("\\b[0-9]+\\b",numbers.get(i));
//            answer +=result.substring(0,result.indexOf(numbers.get(i))+numbers.get(i).length());
//            result = result.substring(result.indexOf(numbers.get(i))+numbers.get(i).length());
//        }
//        answer+=result;
//        System.out.println(answer);
//    }
 
 
 
//    task 13
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        while (in.hasNextLine()) {
//            String str = in.nextLine();
//            str = str.replaceAll("[\\s]{8}","\t");
//            System.out.println(str);
//        }
//    }
 
//    task 14
//    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        ArrayList<String> words = new ArrayList<>();
//        while (in.hasNextLine()) {
//            StringTokenizer wordsInLine = new StringTokenizer(in.nextLine());
//            while (wordsInLine.hasMoreTokens())
//                words.add(wordsInLine.nextToken());
//        }
//        String longestWord = "";
//        int maxLong = 0;
//        for (String word: words) {
//            if (word.length() > maxLong) {
//                maxLong = word.length();
//                longestWord = word;
//            }
//        }
//        int count = 0;
//        for (String word: words) {
//            if (word.equals(longestWord))
//                count ++;
//        }
//        System.out.println(longestWord + " " + count);
//    }
 
 //task 15 решён отдельно(на компе это вариаент 5)
 
// task 16
//    public static void main(String[] args) {
//        ArrayList<String> numbers= new ArrayList<>();
//        String result = "";
//        String answer = "";
//        Scanner sc = new Scanner(System.in);
//        while (sc.hasNext()){
//            result+=sc.nextLine();
//        }
//        StringTokenizer tokenizer = new StringTokenizer(result);
//        while (tokenizer.hasMoreElements()){
//            String word = tokenizer.nextToken();
//            if (word.matches("\\b[a-zA-z]+\\b")){
//                numbers.add(word);
//            }
//        }
//        Collections.sort(numbers);
//        //numbers.sort(new my_Comparator());
//        for (int i = 0;i<numbers.size();++i){
//            result = result.replaceFirst("\\b[a-zA-z]+\\b",numbers.get(i));
//            answer +=result.substring(0,result.indexOf(numbers.get(i))+numbers.get(i).length());
//            result = result.substring(result.indexOf(numbers.get(i))+numbers.get(i).length());
//        }
//        answer+=result;
//        System.out.println(answer);
//    }
 
//task 17
//public static void main(String[] args) {
//    Scanner sc = new Scanner(System.in);
//    int size = sc.nextInt();
//    int[][] matrix = new int[size][size];
//    for (int i = 0; i < size; ++i) {
//        for (int j = 0; j < size; ++j) {
//            matrix[i][j] = new Random().nextInt(2 * size + 1) - size;
//        }
//    }
//    for (int i = 0; i < size; ++i) {
//        for (int j = 0; j < size; ++j) {
//            System.out.print(matrix[i][j] + "\t");
//        }
//        System.out.println();
//    }
//    System.out.println();
//    for (int i = 0; i < size; ++i) {
//        for (int j = 0; j < size; ++j) {
//            if (i>j) {
//                int tmp = matrix[i][j];
//                matrix[i][j] = matrix[j][i];
//                matrix[j][i] = tmp;
//            }
//        }
//    }
//    System.out.println();
//    for (int i = 0; i < size; ++i) {
//        for (int j = 0; j < size; ++j) {
//            System.out.print(matrix[i][j] + "\t");
//        }
//        System.out.println();
//    }
//
//}
 
 
    //task18
//public static void main(String[] args) {
//    Scanner sc = new Scanner(System.in);
//    LinkedList<String> text = new LinkedList<>();
//    LinkedList<String>new_text = new LinkedList<>();
//    while (sc.hasNextLine()) {
//        String line = sc.nextLine();
//        line = line.replaceAll("\\t", " ");
//        line = line.replaceAll("\\s+", " ");
//        line = line.trim();
//        line = line.replaceAll("\\s+(?=\\p{Punct})", "");
//        text.add(line);
//    }
//    String temp="";
//    for(String st:text){
//        st+=temp;
//        while (st.length()>=80){
//            if (st.length() == 80){
//                new_text.add(st.trim());
//                temp="";
//                st="";
//            }
//            else{
//                int index = 80;
//                while (st.charAt(index)!=' '){
//                    index--;
//                }
//                String tmp = st.substring(0,index-1);
//                st = st.substring(index);
//                new_text.add(tmp.trim());
//            }
//
//        }
//        temp = st;
//
//    }
//    if (temp!=""){
//        new_text.add(temp);
//    }
//    for (String tmp:new_text){
//        System.out.println(tmp);
//    }
//
//}
 
 
//    //task 25
//    public static class Word implements Comparable<Word> {
//        String num;
//        int line;
//
//        public Word(String num, int line) {
//            this.num = num;
//            this.line = line;
//        }
//
//        @Override
//        public int compareTo(Word word) {
//            double w1 = Double.parseDouble(this.num);
//            double w2 = Double.parseDouble(word.num);
//            if (w1 > w2) {
//                return 1;
//            }
//            if (w2>w1){
//                return -1;
//            }
//
//            return 0;
//        }
//
//        @Override
//        public String toString() {
//            return ""+num+" at line #"+line+".";
//        }
//    }
//    public static void main(String[] args) {
//    Scanner sc = new Scanner(System.in);
//    ArrayList<Word> answer = new ArrayList<>();
//    int num_line =1;
//    while (sc.hasNext()){
//        String line = sc.nextLine();
//        StringTokenizer tokenizer = new StringTokenizer(line);
//        while (tokenizer.hasMoreElements()){
//            String word = tokenizer.nextToken();
//            if (word.matches("-?[0-9]+(\\.[0-9]+)?")){
//                answer.add(new Word(word,num_line));
//            }
//        }
//        num_line++;
//    }
//    Collections.sort(answer);
//    for (Word w:answer){
//        System.out.println(w);
//    }
//
//    }
 
    //task 27
 
//    public static class Word  {
//        String num;
//        int line;
//
//        public Word(String num, int line) {
//            this.num = num;
//            this.line = line;
//        }
//
//
//
//        @Override
//        public String toString() {
//            return ""+num+" at line #"+line+".";
//        }
//    }
//    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        ArrayList<Word> answer = new ArrayList<>();
//        int num_line =1;
//        while (sc.hasNext()){
//            String line = sc.nextLine();
//            StringTokenizer tokenizer = new StringTokenizer(line);
//            while (tokenizer.hasMoreElements()){
//                String word = tokenizer.nextToken();
//                if (word.matches("0([0-9]+)?")){
//                    answer.add(new Word(word,num_line));
//                }
//            }
//            num_line++;
//        }
//        for (Word w:answer){
//            System.out.println(w);
//        }
//
//    }
 
 
}