package MatrixMultiplicationOrder;

import java.io.*;

/*
Условие:
Дана последовательность из s матриц A1,A2,…,As. Требуется определить,
в каком порядке их следует перемножать, чтобы число атомарных операций
умножения было минимальным. Матрицы предполагаются совместимыми по
отношению к матричному умножению (т.е. число столбцов матрицы Ai−1
совпадает с числом строк матрицы Ai).

Будем считать, что произведение матриц — операция, которая принимает
на вход две матрицы размера k×m и m×n и возвращает матрицу размера k×n,
затратив на это kmn атомарных операций умножения. (Базовый тип позволяет
хранить любой элемент итоговой и любой возможной промежуточной матрицы,
поэтому умножение двух элементов требует одной атомарной операции.)

Так как перемножение матриц ассоциативно, итоговая матрица не зависит
от порядка выполнения операций умножения. Другими словами, нет разницы,
в каком порядке расставляются скобки между множителями, результат будет
один и тот же.

Формат входных данных:
В первой строке задано число s матриц (2≤s≤100). В последующих s строках
заданы размеры матриц: строка i+1 содержит через пробел число ni строк
и число mi столбцов матрицы Ai (1≤ni,mi≤100). Гарантируется, что mi
совпадает с ni+1 для всех индексов i от 1 до s−1.

Формат выходных данных:
Выведите минимальное число атомарных операций умножения, необходимое
для перемножения s матриц.

Примеры:
4
20 5
5 35
35 4
4 25
+---------------------------------------------------------+
|        input.txt           |        output.txt          |
+---------------------------------------------------------+
| 3                          | 130                        |
| 2 3                        |                            |
| 3 5                        |                            |
| 5 10                       |                            |
+---------------------------------------------------------+
| 4                          | 3100                       |
| 20 5                       |                            |
| 5 35                       |                            |
| 35 4                       |                            |
| 4 25                       |                            |
+---------------------------------------------------------+

Замечание:
В первом примере можно умножать двумя способами:
(A1(A2A3)): требуется 3×5×10+2×3×10=150+60=210 операций;
((A1A2)A3): требуется 2×3×5+2×5×10=30+100=130 операций.
Второй способ эффективнее.
 */

public class MatrixMultiplicationOrder {
    public static void main(String[] args) throws IOException {
        BufferedReader file = new BufferedReader(new FileReader("input.txt"));
        int n = Integer.parseInt(file.readLine());
        int[] dimensions = new int[n + 1];
        String[] str = file.readLine().split(" ");
        dimensions[0] = Integer.parseInt(str[0]);
        dimensions[1] = Integer.parseInt(str[1]);
        for (int i = 2; i < n + 1; i++) {
            str = file.readLine().split(" ");
            dimensions[i] = Integer.parseInt(str[1]);
        }
        file.close();
        int[][] matrix = new int[dimensions.length][dimensions.length];
        int j;
        for (int l = 1; l < n; l++) {
            for (int i = 0; i < n - l; i++) {
                j = i + l;
                matrix[i][j] = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {

                    int q = matrix[i][k] + matrix[k + 1][j] +
                            dimensions[i] * dimensions[k + 1] * dimensions[j + 1];
                    if (q < matrix[i][j]) {
                        matrix[i][j] = q;
                    }
                }
            }
        }
        FileWriter fw = new FileWriter("output.txt");
        fw.write(String.valueOf(matrix[0][n-1]));
        fw.close();

    }
}
