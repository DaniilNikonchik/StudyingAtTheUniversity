package SummaOfVertices;

import java.io.*;
import java.util.*;

/*
Дано бинарное поисковое дерево, в котором ключи вершин являются
целыми числами в диапазоне от −231 до 231 включительно.
Найдите сумму ключей всех вершин дерева.

Формат входных данных:
Входной файл содержит последовательность чисел — ключи вершин в
порядке добавления в дерево. Ключи задаются в формате по одному в строке.
В поисковом дереве все ключи по определению уникальны, поэтому при попытке
добавить в дерево ключ, который там уже есть, он игнорируется.

Формат выходных данных:
Выведите единственное число — сумму ключей в построенном дереве.

Примеры:
+---------------------------------------------------------+
|        input.txt           |        output.txt          |
+---------------------------------------------------------+
| 2                          | 5                          |
| 3                          |                            |
+---------------------------------------------------------+
| 5                          | 27                         |
| 2                          |                            |
| 4                          |                            |
| 1                          |                            |
| 8                          |                            |
| 7                          |                            |
+---------------------------------------------------------+
| 0                          | 0                          |
| 100                        |                            |
| -100                       |                            |
+---------------------------------------------------------+
 */

public class Summa {
    public static void main(String[] args) throws IOException {
        FileWriter fw = new FileWriter("output.txt");
        Scanner sc = new Scanner(new File("input.txt"));
        Set<Long> set = new HashSet<>();
        while (sc.hasNextLong()) {
            if (sc.hasNextLong()) {
                set.add(sc.nextLong());
            } else {
                sc.next();
            }
        }
        long sum = 0;
        Long[] arr = new Long[set.size()];
        set.toArray(arr);
        for (Long aLong : arr) {
            sum = sum + aLong;
        }
        fw.write(String.valueOf(sum));
        fw.close();
    }
}